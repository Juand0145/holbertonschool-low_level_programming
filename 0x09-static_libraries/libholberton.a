!<arch>
0-isupper.c/    1614470699  1000  1000  100664  213       `
#include "holberton.h"

/**
 * _isupper - check if is upper or lower case
 * @c: the letter to check
 * Return: 1 if is uppercase and 0 if is lower case
 */
int _isupper(int c)
{
	return (c >= 'A' && c <= 'Z');
}

0-memset.c/     1614471368  1000  1000  100664  357       `
#include "holberton.h"

/**
 * _memset - function fills the first n bytes of
 * the memory area pointed to by s with the
 * constant byte b
 * @s: directiÃ³n
 * @b: chracter to repeat
 * @n: number of bytes
 * Return: return s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     1614471141  1000  1000  100664  398       `
#include "holberton.h"
/**
 * _strcat - cocatenates two strings
 * @dest: Destination string
 * @src: string to cocatenates
 * Return: Give us the dest result
 */
char *_strcat(char *dest, char *src)
{
	int counter, j;

	for (counter = 0; dest[counter] != '\0'; counter++)
	{}

	for (j = 0; src[j] != '\0'; j++, counter++)
	{
		dest[counter] = src[j];
	}

	dest[counter] = '\0';

	return (dest);
}
100-atoi.c/     1614471077  1000  1000  100664  574       `
#include "holberton.h"

/**
 * _atoi - comvert from string to integer
 * @s: th string we want to comvert
 * Return: return int value
 */
int _atoi(char *s)
{
	int i, n, sign, count, j, mult;

	sign = 1;
	count = 0;
	mult = 1;
	n = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if ((s[i - 1] >= '0' && s[i - 1] <= '9') && (s[i] < '0' || s[i] > '9'))
			break;

		if (s[i] == '-')
			sign = sign * -1;

		if (s[i] >= '0' && s[i] <= '9')
		{
			count++;
		}
	}


	for (j = i - 1; j >= i - count; j--)
	{
		n = (s[j] - '0') * mult + n;
		mult = mult * 10;
	}

	return (n * sign);
}
1-isdigit.c/    1614470731  1000  1000  100664  190       `
#include "holberton.h"

/**
 * _isdigit - 1 if c is a digit
 * Returns 0 otherwise
 * @c: Value to check
 * Return: Return 0 or 1
 */
int _isdigit(int c)
{
	return (c >= '0' && c <= '9');
}
1-memcpy.c/     1614471392  1000  1000  100664  396       `
#include "holberton.h"

/**
 * _memcpy - function copies n bytes from memory
 * area src to memory area dest
 * @src: bytes to copy to dest
 * @dest: Destination bytes for been copied
 * @n: Number of bytes to copy
 * Return: The result of the copy
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    1614471173  1000  1000  100664  496       `
#include "holberton.h"

/**
 * _strncat - function that concatenates two strings.
 * @dest: Destinatio string
 * @src: String to cocatenate
 * @n: number of bytes required in the string
 * Return: Returns the cocatenated string in dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int counter, j;

	for (counter = 0; dest[counter] != '\0'; counter++)
	{}

	for (j = 0; (src[j] != '\0') && (j < n); j++, counter++)
	{
		dest[counter] = src[j];
	}

	dest[counter] = '\0';

	return (dest);
}
2-strchr.c/     1614471418  1000  1000  100664  413       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strchr - Returns a pointer to the first
 * occurrence of the character c in the string s,
 * or NULL if the character is not found
 * @s: string s
 * @c : Character to search
 * Return: Return the string cuted
 */
char *_strchr(char *s, char c)
{
	int i, a;

	for (i = 0; s[i] != '\0'; i++)
	{
		a = *s++;

		if (a == c)
			return (s - 1);
	}

	return (NULL);
}

2-strlen.c/     1614470823  1000  1000  100664  215       `
#include "holberton.h"

/**
 * _strlen - return the leght of a string
 * @s: word to lenghted
 * Return: the leght of the word
 */
int _strlen(char *s)
{
	int n;

	for (n = 0; s[n] != '\0'; n++)
	{}

	return (n);
}

2-strncpy.c/    1614471240  1000  1000  100664  462       `
#include "holberton.h"
/**
 * _strncpy - Copy the string over other strin
 * @dest: String who recive the copy
 * @src: String tha is copied
 * @n: The number of character of the second string that should be copied
 * Return: Return the fusion between both strings
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; (src[i] != '\0') && i < n; i++)
	{
		dest[i] = src[i];
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    1614469964  1000  1000  100664  205       `
#include "holberton.h"

/**
 * _islower - Look for lower case function
 * @c: the character to check
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
	return (c >= 'a' && c <= 'z');
}

3-strcmp.c/     1614471265  1000  1000  100664  310       `
#include "holberton.h"

/**
 * _strcmp - compare two strings
 * @s1: first string
 * @s2: Second string
 * Return: return the value of two strings
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] != '\0'; i++)
	{
		if (s1[i] - s2[i] != 0)
		{
			return (s1[i] - s2[i]);
		}
	}

	return (0);
}
3-strspn.c/     1614471452  1000  1000  100664  508       `
#include "holberton.h"

/**
 * _strspn - Write a function that gets the length
 * of a prefix substring.
 * @s: origin substring
 * @accept: bytes to compare
 * Return: return the prefix bytes
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, counter, mark;

	counter = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		mark = 0;

		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				mark = 1;
				counter++;
			}
		}

		if (mark == 0)
			return (counter);
	}

	return (counter);
}
4-isalpha.c/    1614469997  1000  1000  100664  240       `
#include "holberton.h"

/**
 * _isalpha - look for alphabetical character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    1614471477  1000  1000  100664  469       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strpbrk -  function locates the first
 * occurrence in the string s of any of the
 * bytes in the string accept
 * @s: Base string
 * @accept: string to compare
 * Return: gives back the returning string
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}

5-strstr.c/     1614471509  1000  1000  100664  575       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strstr - function finds the first occurrence
 * of the substring needle in the string haystack.
 * The terminating null bytes (\0) are not compared
 * @haystack: Primary string
 * @needle: Substring yo check
 * Return: pointer to the begining of the string
 */
char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{

		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j]  != needle[j])
				break;
		}

		if (!needle[j])
			return (&haystack[i]);

	}
	return (NULL);
}

6-abs.c/        1614470041  1000  1000  100664  214       `
#include "holberton.h"

/**
 * _abs - Calculate the absolute value of a number
 * @n: the number tu check
 * Return: return the absolute value
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     1614470914  1000  1000  100664  310       `
#include "holberton.h"

/**
 * _strcpy - transform a string
 * @dest: destination
 * @src: source
 * Return: It return a character
 */
char *_strcpy(char *dest, char *src)
{
	int i, count;

	for (count = 0; src[count] != '\0'; count++)
	{}

	for (i = 0; i <= count; i++)
		dest[i] = src[i];

	return (dest);
}
_putchar.c/     1614469245  1000  1000  100664  247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

